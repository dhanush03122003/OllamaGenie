# chat_history.py

from db import Mongo
from ollama import chat

class Chat(Mongo):
    """
    Handles storing and managing chat history.

    This class extends the Mongo class to interact with a MongoDB database
    and provides methods to process user questions, store chat history, 
    and retrieve it. It also integrates with an external chat API.
    """

    def __init__(self, model, mongo_client_url, database, collection):
        """
        Initializes the Chat class.

        Args:
            model (str): The name of the AI model used for generating responses.
            mongo_client_url (str): The URL for the MongoDB client.
            database (str): The name of the database to connect to.
            collection (str): The name of the collection to use.

        Attributes:
            model (str): Stores the AI model name.
            user_input (dict or None): Stores the last user input message.
            model_response (dict or None): Stores the last model-generated response.
            mongo_client (Mongo): Instance of the Mongo class for database operations.
            history (list): List of dictionaries representing the chat history.
        """
        self.model = model
        self.user_input = None
        self.model_response = None

        try:
            self.mongo_client = Mongo(mongo_client_url, database, collection)
            self.history = self.mongo_client.get_history(model=self.model)

            if len(self.history) == 0:
                self.history.append({"role": "assistant", "content": "You are a helpful assistant."})

        except Exception as e:
            print(f"Error initializing ChatHistory: {e}")
            self.history = [{"role": "assistant", "content": "You are a helpful assistant."}]

    def process_question(self, question):
        """
        Processes the user's question and returns a response.

        Args:
            question (str): The user's input question.

        Returns:
            str: The cleaned response generated by the AI model.
        """
        self.add_user_message(question)

        # print(self.get_history())

        full_response = ""

        for response in chat(model=self.model, messages=self.get_history(), stream=True):
            chunk = response.get("message", {}).get("content", "")
            chunk = chunk.replace("", "").replace("", "")  # <-- Clean it here
            print(chunk, end="", flush=True)
            full_response += chunk

        # Clean the final response
        if full_response:
            cleaned_response = full_response.strip()
        else:
            cleaned_response = "Unexpected response format."

        self.add_bot_response(cleaned_response)
        return cleaned_response

    def add_user_message(self, message):
        """
        Adds a user message to chat history.

        Args:
            message (str): The user's input message.
        """
        try:
            self.history.append({"role": "user", "content": message})
            self.user_input = {"role": "user", "content": message, "model": self.model}

            # self.mongo_client.save_into_db({"role": "user", "content": message, "model": self.model})

        except Exception as e:
            print(f"Error adding user message: {e}")

    def add_bot_response(self, response):
        """
        Adds a chatbot response to chat history.

        Args:
            response (str): The AI model's generated response.
        """
        try:
            self.history.append({"role": "assistant", "content": response})
            self.model_response = {"role": "assistant", "content": response, "model": self.model}

            self.mongo_client.save_into_db(user_input=self.user_input, model_res=self.model_response)

        except Exception as e:
            print(f"Error adding bot response: {e}")

    def get_history(self):
        """
        Returns the chat history.

        Returns:
            list: A list of dictionaries representing the chat history.
                  Each dictionary contains 'role' and 'content' keys.
                  Example: [{"role": "user", "content": "..."}]
        """
        try:
            return self.history
        except Exception as e:
            print(f"Error retrieving chat history: {e}")
            return []